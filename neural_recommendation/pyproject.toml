[project]
name = "neural-recommendation"
version = "0.1.0"
description = ""
authors = [
    {name = "Your Name",email = "you@example.com"}
]
readme = "README.md"
requires-python = ">=3.13,<4.0"
dependencies = [
    "fastapi[standard] (>=0.115.12,<0.116.0)",
    "pydantic-settings (>=2.9.1,<3.0.0)",
    "sqlalchemy[asyncio] (>=2.0.41,<3.0.0)",
    "alembic (>=1.16.1,<2.0.0)",
    "pyjwt (>=2.10.1,<3.0.0)",
    "pwdlib[argon2] (>=0.2.1,<0.3.0)",
    "aiosqlite (>=0.21.0,<0.22.0)",
    "psycopg[binary] (>=3.2.9,<4.0.0)",
    "python-jose[cryptography] (>=3.5.0,<4.0.0)",
    "torch (>=2.7.1,<3.0.0)",
    "numpy (>=2.3.1,<3.0.0)",
    "pandas (>=2.3.1,<3.0.0)",
    "matplotlib (>=3.10.3,<4.0.0)",
    "requests (>=2.32.4,<3.0.0)",
    "sentence-transformers (>=5.0.0,<6.0.0)",
    "pgvector (>=0.3.0,<1.0.0)",
    "annoy (>=1.17.3,<2.0.0)"
]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.0"
pytest-cov = "^6.1.1"
ruff = "^0.11.13"
taskipy = "^1.14.1"
pytest-asyncio = "^1.0.0"
testcontainers = "^4.10.0"

[tool.ruff]
line-length = 120
extend-exclude = ['migrations', 'scripts']

[tool.ruff.lint]
preview = true
select = ['I', 'F', 'E', 'W', 'PL', 'PT', "FAST"]
ignore = [
    "PLR6301",  # Method could be a function (common in test classes)
    "PLR2004",  # Magic value used in comparison (common in tests)
    "PLR0913",  # Too many arguments (common in ML model constructors)
    "PLR0917",  # Too many positional arguments (common in ML model constructors)
    "PLR0914",  # Too many local variables (common in ML evaluation functions)
    "PLW2901",  # Variable overwriting in loop (common pattern in ML tensor processing)
]


[tool.ruff.format]
preview = true

[tool.pytest.ini_options]
pythonpath = "."
addopts = '-p no:warnings'
asyncio_default_fixture_loop_scope = 'function'

[tool.taskipy.tasks]
lint = 'ruff check'
pre_format = 'ruff check --fix'
format = 'ruff format'
run = 'LOG_LEVEL=INFO fastapi dev neural_recommendation/app.py'
pre_test = 'task lint'
test = 'pytest -s -x --cov=neural_recommendation -vv'
post_test = 'coverage html'

[tool.coverage.run]
concurrency = ["thread", "greenlet"]